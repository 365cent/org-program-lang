Testing expr: Positive cases
PASS: +expr(true_)
PASS: +expr(false_)
PASS: +expr(zero)
PASS: +expr(suc(zero))
PASS: +expr(pred(zero))
PASS: +expr(if_then_else(true_,false_,true_))
PASS: +expr(if_then_else(false_,suc(zero),pred(zero)))
PASS: +expr(iszero(zero))
PASS: +expr(iszero(suc(zero)))
PASS: +expr(var(X))
Testing expr: Negative cases
FAIL: +expr(if_then_else(x,true_,false_))
FAIL: +expr(suc(Y))
FAIL: +expr(pred(z))
FAIL: +expr(iszero(notzero))
Testing value: Positive cases
PASS: +value(true_)
PASS: +value(false_)
PASS: +value(zero)
PASS: +value(suc(zero))
PASS: +value(suc(suc(zero)))
Testing value: Negative cases
FAIL: +value(if_then_else(true_,false_,true_))
FAIL: +value(suc(true_))
FAIL: +value(pred(zero))
Testing type/1: Positive cases
PASS: +type(bool)
PASS: +type(nat)
Testing type/1: Negative cases
FAIL: +type(string)
FAIL: +type(int)
FAIL: +type(list)
Testing typed: Positive cases
PASS: +typed(true_,bool)
PASS: +typed(false_,bool)
PASS: +typed(zero,nat)
PASS: +typed(suc(zero),nat)
PASS: +typed(pred(zero),nat)
PASS: +typed(iszero(zero),bool)
PASS: +typed(if_then_else(true_,zero,zero),nat)
PASS: +typed(if_then_else(false_,false_,true_),bool)
PASS: +typed([(var(X),nat),(var(Y),bool)],var(X),nat)
PASS: +typed([(var(X),nat),(var(Y),bool)],var(Y),bool)
PASS: +typed([(var(X),nat),(var(Y),bool)],suc(var(X)),nat)
Testing sstep: Negative cases
FAIL: +typed(true_,nat)
FAIL: +typed(zero,bool)
FAIL: +typed(if_then_else(true_,zero,true_),nat)
FAIL: +typed([(var(X),nat),(var(Y),bool)],var(X),bool)
FAIL: +typed([(var(X),nat),(var(Y),bool)],var(Z),nat)
FAIL: +typed([(var(X),nat),(var(Y),bool)],suc(var(Y)),nat)
Testing sstep: Positive cases
PASS: +sstep(if_then_else(true_,zero,suc(zero)),zero)
PASS: +sstep(if_then_else(false_,zero,suc(zero)),suc(zero))
PASS: +sstep(if_then_else(if_then_else(true_,true_,false_),zero,suc(zero)),if_then_else(true_,zero,suc(zero)))
PASS: +sstep(pred(zero),zero)
PASS: +sstep(pred(suc(zero)),zero)
PASS: +sstep(iszero(zero),true_)
PASS: +sstep(iszero(suc(zero)),false_)
PASS: +sstep([(var(X),zero),(var(Y),suc(zero))],var(X),zero)
PASS: +sstep([(var(X),zero),(var(Y),suc(zero))],var(Y),suc(zero))
Testing typed: Negative cases
FAIL: +sstep(suc(zero),zero)
FAIL: +sstep(if_then_else(zero,zero,suc(zero)),_4816)
FAIL: +sstep(suc(true_),_4840)
FAIL: +sstep(pred(true_),_4856)
FAIL: +sstep(iszero(true_),_4872)
FAIL: +sstep([(var(X),zero),(var(Y),suc(zero))],var(Z),_4890)
Testing mstep: Positive cases
PASS: +mstep(true_,true_)
PASS: +mstep(zero,zero)
Testing mstep: Negative cases
FAIL: +mstep(if_then_else(if_then_else(true_,false_,true_),zero,suc(zero)),zero)
FAIL: +mstep(suc(suc(zero)),suc(zero))
Testing tsstep: Positive cases
PASS: +tsstep(if_then_else(true_,zero,suc(zero)),zero,t_IfTrue)
PASS: +tsstep(if_then_else(false_,zero,suc(zero)),suc(zero),t_IfFalse)
PASS: +tsstep(if_then_else(if_then_else(true_,true_,false_),zero,suc(zero)),if_then_else(true_,zero,suc(zero)),t_If(t_IfTrue))
PASS: +tsstep(pred(zero),zero,t_PredZero)
PASS: +tsstep(pred(suc(zero)),zero,t_PredSucc)
PASS: +tsstep(iszero(zero),true_,t_IsZeroZero)
PASS: +tsstep(iszero(suc(zero)),false_,t_IsZeroSucc)
Testing tsstep: Negative cases
FAIL: +tsstep(if_then_else(zero,zero,suc(zero)),_5174,_5176)
FAIL: +tsstep(pred(true_),_5200,_5202)
FAIL: +tsstep(suc(suc(zero)),suc(suc(zero)),t_Suc(t_NoStep))
Testing typederiv: Positive cases
PASS: +typederiv(true_,bool,t_True)
PASS: +typederiv(false_,bool,t_False)
PASS: +typederiv(zero,nat,t_Zero)
PASS: +typederiv(suc(zero),nat,t_Succ(t_Zero))
PASS: +typederiv(suc(suc(zero)),nat,t_Succ(t_Succ(t_Zero)))
PASS: +typederiv(pred(zero),nat,t_Pred(t_Zero))
PASS: +typederiv(pred(suc(zero)),nat,t_Pred(t_Succ(t_Zero)))
PASS: +typederiv(iszero(zero),bool,t_Iszero(t_Zero))
PASS: +typederiv(iszero(suc(zero)),bool,t_Iszero(t_Succ(t_Zero)))
PASS: +typederiv(if_then_else(true_,zero,zero),nat,t_If(t_True,t_Zero,t_Zero))
PASS: +typederiv(if_then_else(false_,true_,false_),bool,t_If(t_False,t_True,t_False))        
Testing typederiv: Negative cases
FAIL: +typederiv(true_,nat,_5512)
FAIL: +typederiv(zero,bool,_5526)
FAIL: +typederiv(suc(true_),nat,_5540)
FAIL: +typederiv(pred(true_),nat,_5558)
FAIL: +typederiv(iszero(true_),bool,_5576)
FAIL: +typederiv(if_then_else(zero,zero,zero),nat,_5594)
FAIL: +typederiv(if_then_else(true_,zero,true_),nat,_5616)
Testing additional: Positive cases
PASS: +typedvalue(true_,bool)
PASS: +typedvalue(zero,nat)
PASS: +progress(true_,bool)
PASS: +progress(if_then_else(true_,zero,suc(zero)),nat)
PASS: +add_to_context([],var(X),nat,[(var(X),nat)])
PASS: +update_context([(var(X),nat)],var(X),bool,[(var(X),bool)])
PASS: +lookup_context([(var(X),nat)],var(X),nat)
Testing additional: Negative cases
FAIL: +typedvalue(true_,nat)
FAIL: +typedvalue(zero,bool)
FAIL: +progress(if_then_else(zero,zero,zero),_5854)
true.